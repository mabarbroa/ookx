name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run Black (formatter check)
      run: black --check .
    
    - name: Run isort (import sorting check)
      run: isort --check-only .
    
    - name: Run Flake8 (linter)
      run: flake8 .
    
    - name: Run tests
      run: pytest -v
    
    - name: Security check
      run: |
        pip install safety bandit
        safety check
        bandit -r . -f json

  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Validate configuration
      run: |
        export PRIVATE_KEY="0x${'1' * 64}"
        python -c "from config import config; print('Config validation passed')"

  deploy:
    name: Deploy Bot
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create environment file
      run: |
        echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" >> .env
        echo "RPC_URL=${{ secrets.RPC_URL }}" >> .env
        echo "BUY_PRICE_BELOW=${{ secrets.BUY_PRICE_BELOW }}" >> .env
        echo "SELL_PRICE_ABOVE=${{ secrets.SELL_PRICE_ABOVE }}" >> .env
        echo "SWAP_AMOUNT_ETH=${{ secrets.SWAP_AMOUNT_ETH }}" >> .env
        echo "SELL_PERCENTAGE=${{ secrets.SELL_PERCENTAGE }}" >> .env
        echo "SLIPPAGE=${{ secrets.SLIPPAGE }}" >> .env
        echo "CHECK_INTERVAL=${{ secrets.CHECK_INTERVAL }}" >> .env
        echo "TOKEN_ADDRESS=${{ secrets.TOKEN_ADDRESS }}" >> .env
    
    - name: Validate secrets
      run: |
        if [ -z "${{ secrets.PRIVATE_KEY }}" ]; then
          echo "Error: PRIVATE_KEY secret is not set"
          exit 1
        fi
        echo "All required secrets are configured"
    
    - name: Start bot (dry run)
      run: |
        timeout 30s python main.py || true
        echo "Bot startup validation completed"
    
    - name: Deploy notification
      run: |
        echo "üöÄ Bot deployment completed successfully!"
        echo "üìä Monitoring token: ${{ secrets.TOKEN_ADDRESS }}"
        echo "‚è∞ Check interval: ${{ secrets.CHECK_INTERVAL }}s"
